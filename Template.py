# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QFileDialog, QMessageBox
import sys
import cv2
import numpy as np

import Main

global ratio
ratio = 2  # 调节屏幕所占比例

global template
global image
global result


class Template_Window(QMainWindow):
    def __init__(self):
        super(Template_Window, self).__init__()
        self.setupUi(self)

    # class Template_Window(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(int(800 * ratio), int(500 * ratio))
        font = QtGui.QFont()
        font.setFamily("隶书")
        font.setPointSize(12)
        mainWindow.setFont(font)
        mainWindow.setIconSize(QtCore.QSize(24, 24))
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        ''' 模板 '''
        self.template = QtWidgets.QLabel(self.centralwidget)
        self.template.setGeometry(QtCore.QRect(int(60 * ratio), int(40 * ratio), int(220 * ratio), int(360 * ratio)))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.template.setFont(font)
        self.template.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.template.setAutoFillBackground(False)
        self.template.setAlignment(QtCore.Qt.AlignCenter)
        self.template.setObjectName("模板")
        ''' 原图/变换后图 '''
        self.loadimage = QtWidgets.QLabel(self.centralwidget)
        self.loadimage.setGeometry(QtCore.QRect(int(340 * ratio), int(40 * ratio), int(400 * ratio), int(360 * ratio)))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.loadimage.setFont(font)
        self.loadimage.setAlignment(QtCore.Qt.AlignCenter)
        self.loadimage.setObjectName("原图/变换后图")
        ''' Load Template '''
        self.LoadTemplate = QtWidgets.QPushButton(self.centralwidget)
        self.LoadTemplate.setGeometry(
            QtCore.QRect(int(95 * ratio), int(410 * ratio), int(150 * ratio), int(30 * ratio)))
        self.LoadTemplate.clicked.connect(lambda: self.load_template())  # 添加点击事件
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LoadTemplate.setFont(font)
        self.LoadTemplate.setIconSize(QtCore.QSize(20, 20))
        self.LoadTemplate.setCheckable(False)
        self.LoadTemplate.setObjectName("LoadTemplate")
        ''' Load Image '''
        self.LoadImage = QtWidgets.QPushButton(self.centralwidget)
        self.LoadImage.setGeometry(QtCore.QRect(int(390 * ratio), int(410 * ratio), int(120 * ratio), int(30 * ratio)))
        self.LoadImage.clicked.connect(lambda: self.load_image())  # 添加点击事件
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LoadImage.setFont(font)
        self.LoadImage.setIconSize(QtCore.QSize(20, 20))
        self.LoadImage.setCheckable(False)
        self.LoadImage.setObjectName("LoadImage")
        mainWindow.setCentralWidget(self.centralwidget)
        ''' Save Image '''
        self.SaveImage = QtWidgets.QPushButton(self.centralwidget)
        self.SaveImage.setGeometry(QtCore.QRect(int(570 * ratio), int(410 * ratio), int(120 * ratio), int(30 * ratio)))
        self.SaveImage.clicked.connect(lambda: self.save_image())  # 添加点击事件
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.SaveImage.setFont(font)
        self.SaveImage.setIconSize(QtCore.QSize(20, 20))
        self.SaveImage.setCheckable(False)
        self.SaveImage.setObjectName("SaveImage")
        mainWindow.setCentralWidget(self.centralwidget)
        """ 菜单栏 """
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, int(800 * ratio), int(24 * ratio)))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(10)
        self.menubar.setFont(font)
        self.menubar.setNativeMenuBar(True)
        self.menubar.setObjectName("menubar")
        self.action1 = QtWidgets.QAction(mainWindow)
        self.action1.setObjectName("相关系数")
        self.action1.triggered.connect(lambda: self.template_matching(1))
        self.menubar.addAction(self.action1)
        self.action2 = QtWidgets.QAction(mainWindow)
        self.action2.setObjectName("归一化相关系数")
        self.action2.triggered.connect(lambda: self.template_matching(2))
        self.menubar.addAction(self.action2)
        self.action3 = QtWidgets.QAction(mainWindow)
        self.action3.setObjectName("相关法")
        self.action3.triggered.connect(lambda: self.template_matching(3))
        self.menubar.addAction(self.action3)
        self.action4 = QtWidgets.QAction(mainWindow)
        self.action4.setObjectName("归一化相关法")
        self.action4.triggered.connect(lambda: self.template_matching(4))
        self.menubar.addAction(self.action4)
        self.action5 = QtWidgets.QAction(mainWindow)
        self.action5.setObjectName("平方差法")
        self.action5.triggered.connect(lambda: self.template_matching(5))
        self.menubar.addAction(self.action5)
        self.action6 = QtWidgets.QAction(mainWindow)
        self.action6.setObjectName("归一化平方差法")
        self.action6.triggered.connect(lambda: self.template_matching(6))
        self.menubar.addAction(self.action6)
        self.action7 = QtWidgets.QAction(mainWindow)
        self.action7.setObjectName("多目标")
        self.action7.triggered.connect(lambda: self.templates_matching())
        self.menubar.addAction(self.action7)
        self.action8 = QtWidgets.QAction(mainWindow)

        ''' 最后设置将菜单条添加至屏幕 '''
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        # 禁用相关功能
        self.action1.setEnabled(False)
        self.action2.setEnabled(False)
        self.action3.setEnabled(False)
        self.action4.setEnabled(False)
        self.action5.setEnabled(False)
        self.action6.setEnabled(False)
        self.action7.setEnabled(False)
    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "模板匹配"))
        self.template.setText(_translate("mainWindow", "模板图"))
        self.loadimage.setText(_translate("mainWindow", "原图"))
        self.LoadTemplate.setText(_translate("mainWindow", "加载模版"))
        self.LoadImage.setText(_translate("mainWindow", "加载图片"))
        self.SaveImage.setText(_translate("mainWindow", "保存图片"))
        self.action1.setText(_translate("mainWindow", "  相关系数法  "))
        self.action2.setText(_translate("mainWindow", "  归一化相关系数  "))
        self.action3.setText(_translate("mainWindow", "  相关法  "))
        self.action4.setText(_translate("mainWindow", "  归一化相关法  "))
        self.action5.setText(_translate("mainWindow", "  平方差法  "))
        self.action6.setText(_translate("mainWindow", "  归一化平方差  "))
        self.action7.setText(_translate("mainWindow", "  多目标匹配  "))
        self.action8.setText(_translate("mainWindow", "  车牌照识别"))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.LoadTemplate.setFont(font)
        self.LoadImage.setFont(font)
        self.SaveImage.setFont(font)

    def load_template(self):
        """
        加载模板
        """
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Load Image", "", "Images (*.png *.jpg *.jpeg);;All Files (*)",
                                                   options=options)
        if file_path:
            self.statusbar.showMessage(f"Template loaded from {file_path}")
            global template
            template = cv2.imread(file_path)
            size = template.shape
            img_w = size[1]  # 宽度
            img_h = size[0]  # 高度
            if img_w != int(220 * ratio):
                size = (int(220 * ratio), int(220 * ratio * img_h / img_w))  # 二元组(宽,高)
                resize_image = cv2.resize(template, size)
            elif img_h != int(360 * ratio):
                size = (int(360 * ratio * img_w / img_h), int(360 * ratio))
                resize_image = cv2.resize(template, size)
            else:
                resize_image = template
            resize_image = cv2.cvtColor(resize_image, cv2.COLOR_BGR2RGB)  # 注意色彩通道对调问题
            current_bytes = resize_image.tobytes()
            photo = QtGui.QImage(current_bytes,
                                 resize_image.shape[1],
                                 resize_image.shape[0],
                                 resize_image.shape[1] * 3,
                                 QtGui.QImage.Format_RGB888)
            self.template.setPixmap(QtGui.QPixmap.fromImage(photo))
            if 'image' in globals():
                # 若模板和图像都已经加载，则启用相关功能
                self.action1.setEnabled(True)
                self.action2.setEnabled(True)
                self.action3.setEnabled(True)
                self.action4.setEnabled(True)
                self.action5.setEnabled(True)
                self.action6.setEnabled(True)
                self.action7.setEnabled(True)
        else:
            QMessageBox.warning(None, "Warning", "请先加载模板.")

    def load_image(self):
        """
        加载图像
        """
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(None, "Load Image", "", "Images (*.png *.jpg *.jpeg);;All Files (*)",
                                                   options=options)
        if file_path:
            self.statusbar.showMessage(f"Image loaded from {file_path}")
            global image
            image = cv2.imread(file_path)
            global result
            result = image
            size = image.shape
            img_w = size[1]  # 宽度
            img_h = size[0]  # 高度
            if img_w != int(400 * ratio):
                size = (int(400 * ratio), int(400 * ratio * img_h / img_w))  # 二元组(宽,高)
                resize_image = cv2.resize(image, size)
            elif img_h != int(360 * ratio):
                size = (int(360 * ratio * img_w / img_h), int(360 * ratio))
                resize_image = cv2.resize(image, size)
            else:
                resize_image = image
            resize_image = cv2.cvtColor(resize_image, cv2.COLOR_BGR2RGB)  # 注意色彩通道对调问题
            current_bytes = resize_image.tobytes()
            photo = QtGui.QImage(current_bytes,
                                 resize_image.shape[1],
                                 resize_image.shape[0],
                                 resize_image.shape[1] * 3,
                                 QtGui.QImage.Format_RGB888)
            self.loadimage.setPixmap(QtGui.QPixmap.fromImage(photo))
            if 'template' in globals():
                # 若模板和图像都已经加载，则启用相关功能
                self.action1.setEnabled(True)
                self.action2.setEnabled(True)
                self.action3.setEnabled(True)
                self.action4.setEnabled(True)
                self.action5.setEnabled(True)
                self.action6.setEnabled(True)
                self.action7.setEnabled(True)
        else:
            QMessageBox.warning(None, "Warning", "请先加载图像.")

    def change_image(self):
        img = result.copy()
        size = img.shape
        img_w = size[1]  # 宽度
        img_h = size[0]  # 高度
        if img_w != int(400 * ratio):
            size = (int(400 * ratio), int(400 * ratio * img_h / img_w))  # 二元组(宽,高)
            resize_image = cv2.resize(img, size)
        elif img_h != int(360 * ratio):
            size = (int(360 * ratio * img_w / img_h), int(360 * ratio))
            resize_image = cv2.resize(img, size)
        else:
            resize_image = img
        resize_image = cv2.cvtColor(resize_image, cv2.COLOR_BGR2RGB)  # 注意色彩通道对调问题
        current_bytes = resize_image.tobytes()
        photo = QtGui.QImage(current_bytes,
                             resize_image.shape[1],
                             resize_image.shape[0],
                             resize_image.shape[1] * 3,
                             QtGui.QImage.Format_RGB888)
        self.loadimage.setPixmap(QtGui.QPixmap.fromImage(photo))

    def save_image(self):
        """
        保存图像
        """
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(None, "Save Image", "", "Images (*.png *.jpg *.jpeg);;All Files (*)",
                                                   options=options)
        if file_path:
            cv2.imwrite(file_path, result)
            self.statusbar.showMessage(f"Image saved as {file_path}")

    def template_matching(self, type):
        """
        模板匹配
        :param type: 匹配方式 ( 1 - 相关系数法, 2 - 归一化相关系数法, 3 - 相关法, 4 - 归一化相关法 , 5 - 平方差法, 6 - 归一化平方差法)
        """
        img2 = image.copy()
        w, h = template.shape[:2]
        if type == 1:
            method = cv2.TM_CCOEFF
        elif type == 2:
            method = cv2.TM_CCOEFF_NORMED
        elif type == 3:
            method = cv2.TM_CCORR
        elif type == 4:
            method = cv2.TM_CCORR_NORMED
        elif type == 5:
            method = cv2.TM_SQDIFF
        elif type == 6:
            method = cv2.TM_SQDIFF_NORMED
        # eval 语句用来计算存储在字符串中的有效 Python 表达式
        # method = eval(type)
        # 模板匹配
        res = cv2.matchTemplate(img2, template, method)
        # 寻找最值
        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
        # 使用不同的比较方法，对结果的解释不同
        if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
            top_left = min_loc
        else:
            top_left = max_loc
        bottom_right = (top_left[0] + h, top_left[1] + w)
        cv2.rectangle(img2, top_left, bottom_right, (0, 0, 255), 3)
        global result
        result = img2
        self.change_image()

    def templates_matching(self):
        """
        多模板匹配, 采用归一化相关系数法
        """
        img2 = image.copy()
        h, w = template.shape[:2]
        res = cv2.matchTemplate(img2, template, cv2.TM_CCOEFF_NORMED)
        threshold = 0.8
        # 取匹配程度大于%80的坐标
        loc = np.where(res >= threshold)
        for pt in zip(*loc[::-1]):
            cv2.rectangle(img2, pt, (pt[0] + w, pt[1] + h), (0, 0, 255), 1)
        global result
        result = img2
        self.change_image()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = QMainWindow()
    ui = Template_Window()
    ui.setupUi(window)

    window.show()
    sys.exit(app.exec_())
